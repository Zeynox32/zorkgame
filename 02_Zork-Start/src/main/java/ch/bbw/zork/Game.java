package ch.bbw.zork;import java.util.ArrayList;public class Game {    private Parser parser;    private int anzahRaumwechsel = 0;    private Room aktuellerRaum;    private Enemy enemy = new Enemy("Zyklop");    private Room eingangstor, innenhof, bibliothek, magielabor, taverne, geheimgang, katakomben, alteHalle, turmDerWeisen;    private Player player = new Player("User", eingangstor);    public Game() {        parser = new Parser(System.in);        eingangstor = new Room(                "Du stehst vor dem massiven Eingangstor der Burg.\n"                        + "Das schwere Eichenholz ist mit Eisen beschlagen, und zwei hohe Türme flankieren den Zugang.\n"                        + "Hinter dem Tor beginnt das Abenteuer.", "Eingangstor"        );        innenhof = new Room(                "Du betrittst den Innenhof der Burg.\n"                        + "Pflastersteine bedecken den Boden, und Stallungen, Werkstätten und Wachposten reihen sich an den Mauern.\n"                        + "In der Mitte plätschert ein alter Brunnen.", "Innenhof"        );        bibliothek = new Room(                "Die Burgbibliothek ist ein stiller, ehrwürdiger Ort.\n"                        + "Zwischen hohen Regalen stapeln sich uralte Folianten und verstaubte Schriftrollen.\n"                        + "Der Geruch von Leder und Pergament liegt in der Luft.", "Bibliothek"        );        magielabor = new Room(                "Das Magielabor ist erfüllt von geheimnisvollem Glanz.\n"                        + "Auf den Tischen stehen Phiolen, Kristalle und seltsame Gerätschaften.\n"                        + "Runen leuchten schwach an den Wänden, und ein Schimmer von Zauberei liegt in der Luft.", "Magielabor"        );        taverne = new Room(                "Die Burg-Taverne ist ein lebhafter Ort.\n"                        + "Gelächter hallt durch den Saal, Krüge klirren, und der Duft von Braten und Met erfüllt den Raum.\n"                        + "Hier versammeln sich Reisende und Soldaten, um Geschichten und Neuigkeiten auszutauschen.", "Taverne"        );        geheimgang = new Room(                "Du entdeckst einen schmalen Geheimgang, verborgen hinter einer drehbaren Wand.\n"                        + "Die Luft ist kühl und feucht, und deine Schritte hallen unheimlich wider.\n"                        + "Nur eine Fackel spendet spärliches Licht.", "Geheimgang"        );        alteHalle = new Room(                "Die alte Halle der Burg ist gewaltig und ehrfurchtgebietend.\n"                        + "Hohe Steinpfeiler tragen das Gewölbe, und an den Wänden hängen zerschlissene Banner vergangener Herrscher.\n"                        + "Ein Hauch von vergangener Größe liegt in der Luft.", "Alte Halle"        );        katakomben = new Room(                "Unter der Burg liegen die Katakomben.\n"                        + "Enge, dunkle Gänge ziehen sich durch das Gemäuer.\n"                        + "Von den Wänden tropft Wasser, und die Finsternis scheint von uralten Geheimnissen erfüllt zu sein.", "Katakomben"        );        turmDerWeisen = new Room(                "Der Turm der Weisen ragt hoch über die Burg hinaus.\n"                        + "Eine spiralförmige Treppe führt hinauf zu einer Kammer voller Bücher, Kristalle und magischer Artefakte.\n"                        + "Von hier aus überblickt man das gesamte Land.", "Turm der Weisen"        );        eingangstor.setExits(null, null, innenhof, null);        innenhof.setExits(eingangstor, magielabor, taverne, bibliothek);        bibliothek.setExits(null, innenhof, taverne, null);        magielabor.setExits(null, null, geheimgang, innenhof);        taverne.setExits(innenhof, null, geheimgang, bibliothek);        alteHalle.setExits(katakomben, null, turmDerWeisen, null);        geheimgang.setExits(taverne, magielabor, katakomben, null);        katakomben.setExits(geheimgang, null, alteHalle, null);        turmDerWeisen.setExits(alteHalle, null, null, null);        aktuellerRaum = eingangstor;        ArrayList<Room> rooms = new ArrayList<>();        rooms.add(alteHalle);        rooms.add(geheimgang);        rooms.add(katakomben);        rooms.add(turmDerWeisen);        rooms.add(taverne);        rooms.add(innenhof);        rooms.add(bibliothek);        rooms.add(eingangstor);        rooms.add(magielabor);        enemy.randomStartPosition(rooms);    }    public void play() {        printWelcome();        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Danke, dass du unser Spiel gespielt hast und bis zum nächsten Mal...!");    }    private void printWelcome() {        System.out.println("Willkommen bei unserem Zorkgame!");        System.out.println("Zork ist ein einfaches Abenteuerspiel.");        System.out.println("Schreibe hilfe, wenn du nicht weiterkommst.");        System.out.println();        System.out.println("Aktueller Raum: " + "Eingangstor");        System.out.println("Position des Gegners: " + enemy.getPosition().getName());        System.out.println();        System.out.println(aktuellerRaum.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("Dieser Befehl existiert nicht! Bitte stelle sicher, dass du dich nicht vertippt hast. Wenn du nicht weiterkommst, tippe hilfe.");            return false;        }        String commandWord = command.getCommandWord().toLowerCase();        if (commandWord.equals("hilfe")) {            printHelp();        } else if (commandWord.equals("raumwechsel")) {            return goRoom(command);        } else if (commandWord.equals("verlassen")) {            if (command.hasSecondWord()) {                System.out.println("Was willst du verlassen?");            } else {                return true;            }        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Dir zur Verfügung stehende Konsolenbefehle sind:");        System.out.println(parser.showCommands());    }    private boolean checkRoomChanges() {        if (anzahRaumwechsel <= 10) {            anzahRaumwechsel++;            System.out.println("Übrige Versuche: " + (10 - anzahRaumwechsel));            return false;        } else {            System.out.println("Du hast alle deine Versuche verbraucht! Versuche es doch nochmals!");            return true;        }    }    private Boolean checkIfPlayerCatchedEnemy() {        return player.getPosition() == enemy.getPosition();    }    private Boolean goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Bitte gib den Befehl so ein: raumwechsel + himmerlsrichtung. ");            return false;        } else {            String direction = command.getSecondWord();            Room nextRoom = aktuellerRaum.nextRoom(direction);            if (nextRoom == null) {                System.out.println("In dieser Richtung gibt es keinen Raum! Bitte wähle eine andere Richtung.");                System.out.println("Position des Gegners: " + enemy.getPosition().getName());                System.out.println("Aktueller Raum: " + aktuellerRaum.getName());                return false;            } else {                aktuellerRaum = nextRoom;                player.setPosition(aktuellerRaum);                enemy.changeRoom();                if (checkIfPlayerCatchedEnemy()) {                    System.out.println("Herzlichen Glückwunsch, du hast das Spiel gewonnen!");                    System.out.println("Deine Position war: " + player.getPosition().getName());                    System.out.println("Die Position des Gegners war: " + enemy.getPosition().getName());                    return true;                }                ;                System.out.println(aktuellerRaum.longDescription());                System.out.println();                System.out.print("Aktueller Raum: " + player.getPosition().getName());                System.out.println();                System.out.println("Position des Gegners: " + enemy.getPosition().getName());                return checkRoomChanges();            }        }    }}